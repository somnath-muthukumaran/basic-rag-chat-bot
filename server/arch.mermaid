flowchart TD
    %% User Interaction Layer
    User([üë§ User]) --> Upload[üìÑ Upload Novel]
    User --> Query[üí¨ Ask Question]
    
    %% Frontend Layer
    Upload --> VueApp[üñ•Ô∏è Vue.js Frontend]
    Query --> VueApp
    VueApp --> API[üîå FastAPI Backend]
    
    %% Backend Processing
    API --> UploadEndpoint[üì§ /upload Endpoint]
    API --> QueryEndpoint[‚ùì /query Endpoint]
    
    %% Document Processing Flow
    UploadEndpoint --> FileProcessor[üìù File Processing]
    FileProcessor --> PDFExtract{üìÑ PDF?}
    PDFExtract -->|Yes| PyPDF[pypdf Extraction]
    PDFExtract -->|No| TxtRead[Text Reading]
    PyPDF --> TextPreprocess[üßπ Text Preprocessing]
    TxtRead --> TextPreprocess
    
    %% Advanced Chunking with LangChain
    TextPreprocess --> LangChainChunker[üî™ LangChain Chunker]
    LangChainChunker --> RecursiveSplitter[üìä RecursiveCharacterTextSplitter]
    RecursiveSplitter --> SmartChunks[üìö Smart Chunks<br/>Size: 1000 chars<br/>Overlap: 200 chars]
    
    %% Embedding Generation
    SmartChunks --> BatchProcess[‚ö° Batch Processing]
    BatchProcess --> OllamaEmbed[ü§ñ Ollama Embeddings<br/>nomic-embed-text:v1.5]
    OllamaEmbed --> Vectors[üî¢ Vector Embeddings]
    
    %% Vector Storage
    Vectors --> WeaviateStore[üóÑÔ∏è Weaviate Storage]
    WeaviateStore --> VectorDB[(üîç Vector Database<br/>NovelChunk Collection)]
    
    %% Query Processing Flow
    QueryEndpoint --> QueryEmbed[üîç Query Embedding]
    QueryEmbed --> OllamaEmbed
    OllamaEmbed --> SimilaritySearch[üìä Similarity Search]
    SimilaritySearch --> VectorDB
    VectorDB --> RetrievedDocs[üìÑ Retrieved Documents]
    
    %% Contextual Compression
    RetrievedDocs --> WeaviateRetriever[üîÑ Weaviate Retriever]
    WeaviateRetriever --> OllamaCompressor[üóúÔ∏è Ollama Compressor]
    OllamaCompressor --> CompressedDocs[üìù Compressed Context]
    
    %% Response Generation
    CompressedDocs --> PromptTemplate[üìã RAG Prompt Template]
    PromptTemplate --> OllamaChat[ü§ñ Ollama Chat<br/>qwen3:4b]
    OllamaChat --> StreamResponse[üì° Streaming Response]
    StreamResponse --> VueApp
    
    %% Status Monitoring
    UploadEndpoint --> StatusUpdate[üìä Processing Status]
    StatusUpdate --> StatusDB[(üìà Status Storage)]
    VueApp --> StatusCheck[üîÑ Status Polling]
    StatusCheck --> StatusDB
    
    %% Background Processing
    BatchProcess -.->|Background| ProcessingQueue[‚è≥ Background Queue]
    ProcessingQueue -.-> StatusUpdate
    
    %% Configuration
    Config[‚öôÔ∏è Environment Config] -.-> OllamaEmbed
    Config -.-> OllamaChat
    Config -.-> WeaviateStore
    
    %% Styling
    classDef frontend fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef backend fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef ai fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
    classDef storage fill:#fff3e0,stroke:#e65100,stroke-width:2px
    classDef processing fill:#fce4ec,stroke:#880e4f,stroke-width:2px
    
    class User,VueApp frontend
    class API,UploadEndpoint,QueryEndpoint,FileProcessor,TextPreprocess backend
    class OllamaEmbed,OllamaChat,OllamaCompressor,LangChainChunker ai
    class VectorDB,WeaviateStore,StatusDB storage
    class BatchProcess,ProcessingQueue,StatusUpdate processing